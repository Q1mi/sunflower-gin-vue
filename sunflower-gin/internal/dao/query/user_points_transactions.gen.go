// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"sunflower-gin/internal/model"
)

func newUserPointsTransaction(db *gorm.DB, opts ...gen.DOOption) userPointsTransaction {
	_userPointsTransaction := userPointsTransaction{}

	_userPointsTransaction.userPointsTransactionDo.UseDB(db, opts...)
	_userPointsTransaction.userPointsTransactionDo.UseModel(&model.UserPointsTransaction{})

	tableName := _userPointsTransaction.userPointsTransactionDo.TableName()
	_userPointsTransaction.ALL = field.NewAsterisk(tableName)
	_userPointsTransaction.ID = field.NewInt64(tableName, "id")
	_userPointsTransaction.UserID = field.NewInt64(tableName, "user_id")
	_userPointsTransaction.PointsChange = field.NewInt64(tableName, "points_change")
	_userPointsTransaction.CurrentBalance = field.NewInt64(tableName, "current_balance")
	_userPointsTransaction.TransactionType = field.NewInt32(tableName, "transaction_type")
	_userPointsTransaction.Description = field.NewString(tableName, "description")
	_userPointsTransaction.ExtJSON = field.NewString(tableName, "ext_json")
	_userPointsTransaction.CreatedAt = field.NewTime(tableName, "created_at")
	_userPointsTransaction.UpdatedAt = field.NewTime(tableName, "updated_at")
	_userPointsTransaction.DeletedAt = field.NewField(tableName, "deleted_at")

	_userPointsTransaction.fillFieldMap()

	return _userPointsTransaction
}

type userPointsTransaction struct {
	userPointsTransactionDo userPointsTransactionDo

	ALL             field.Asterisk
	ID              field.Int64 // ID
	UserID          field.Int64 // ID
	PointsChange    field.Int64 //  ()
	CurrentBalance  field.Int64
	TransactionType field.Int32 // (1: 2: 3: 4: 5:)
	Description     field.String
	ExtJSON         field.String
	CreatedAt       field.Time
	UpdatedAt       field.Time
	DeletedAt       field.Field

	fieldMap map[string]field.Expr
}

func (u userPointsTransaction) Table(newTableName string) *userPointsTransaction {
	u.userPointsTransactionDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userPointsTransaction) As(alias string) *userPointsTransaction {
	u.userPointsTransactionDo.DO = *(u.userPointsTransactionDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userPointsTransaction) updateTableName(table string) *userPointsTransaction {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.PointsChange = field.NewInt64(table, "points_change")
	u.CurrentBalance = field.NewInt64(table, "current_balance")
	u.TransactionType = field.NewInt32(table, "transaction_type")
	u.Description = field.NewString(table, "description")
	u.ExtJSON = field.NewString(table, "ext_json")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")

	u.fillFieldMap()

	return u
}

func (u *userPointsTransaction) WithContext(ctx context.Context) IUserPointsTransactionDo {
	return u.userPointsTransactionDo.WithContext(ctx)
}

func (u userPointsTransaction) TableName() string { return u.userPointsTransactionDo.TableName() }

func (u userPointsTransaction) Alias() string { return u.userPointsTransactionDo.Alias() }

func (u userPointsTransaction) Columns(cols ...field.Expr) gen.Columns {
	return u.userPointsTransactionDo.Columns(cols...)
}

func (u *userPointsTransaction) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userPointsTransaction) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 10)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["points_change"] = u.PointsChange
	u.fieldMap["current_balance"] = u.CurrentBalance
	u.fieldMap["transaction_type"] = u.TransactionType
	u.fieldMap["description"] = u.Description
	u.fieldMap["ext_json"] = u.ExtJSON
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
}

func (u userPointsTransaction) clone(db *gorm.DB) userPointsTransaction {
	u.userPointsTransactionDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userPointsTransaction) replaceDB(db *gorm.DB) userPointsTransaction {
	u.userPointsTransactionDo.ReplaceDB(db)
	return u
}

type userPointsTransactionDo struct{ gen.DO }

type IUserPointsTransactionDo interface {
	gen.SubQuery
	Debug() IUserPointsTransactionDo
	WithContext(ctx context.Context) IUserPointsTransactionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserPointsTransactionDo
	WriteDB() IUserPointsTransactionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserPointsTransactionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserPointsTransactionDo
	Not(conds ...gen.Condition) IUserPointsTransactionDo
	Or(conds ...gen.Condition) IUserPointsTransactionDo
	Select(conds ...field.Expr) IUserPointsTransactionDo
	Where(conds ...gen.Condition) IUserPointsTransactionDo
	Order(conds ...field.Expr) IUserPointsTransactionDo
	Distinct(cols ...field.Expr) IUserPointsTransactionDo
	Omit(cols ...field.Expr) IUserPointsTransactionDo
	Join(table schema.Tabler, on ...field.Expr) IUserPointsTransactionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserPointsTransactionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserPointsTransactionDo
	Group(cols ...field.Expr) IUserPointsTransactionDo
	Having(conds ...gen.Condition) IUserPointsTransactionDo
	Limit(limit int) IUserPointsTransactionDo
	Offset(offset int) IUserPointsTransactionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserPointsTransactionDo
	Unscoped() IUserPointsTransactionDo
	Create(values ...*model.UserPointsTransaction) error
	CreateInBatches(values []*model.UserPointsTransaction, batchSize int) error
	Save(values ...*model.UserPointsTransaction) error
	First() (*model.UserPointsTransaction, error)
	Take() (*model.UserPointsTransaction, error)
	Last() (*model.UserPointsTransaction, error)
	Find() ([]*model.UserPointsTransaction, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserPointsTransaction, err error)
	FindInBatches(result *[]*model.UserPointsTransaction, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserPointsTransaction) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserPointsTransactionDo
	Assign(attrs ...field.AssignExpr) IUserPointsTransactionDo
	Joins(fields ...field.RelationField) IUserPointsTransactionDo
	Preload(fields ...field.RelationField) IUserPointsTransactionDo
	FirstOrInit() (*model.UserPointsTransaction, error)
	FirstOrCreate() (*model.UserPointsTransaction, error)
	FindByPage(offset int, limit int) (result []*model.UserPointsTransaction, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserPointsTransactionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userPointsTransactionDo) Debug() IUserPointsTransactionDo {
	return u.withDO(u.DO.Debug())
}

func (u userPointsTransactionDo) WithContext(ctx context.Context) IUserPointsTransactionDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userPointsTransactionDo) ReadDB() IUserPointsTransactionDo {
	return u.Clauses(dbresolver.Read)
}

func (u userPointsTransactionDo) WriteDB() IUserPointsTransactionDo {
	return u.Clauses(dbresolver.Write)
}

func (u userPointsTransactionDo) Session(config *gorm.Session) IUserPointsTransactionDo {
	return u.withDO(u.DO.Session(config))
}

func (u userPointsTransactionDo) Clauses(conds ...clause.Expression) IUserPointsTransactionDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userPointsTransactionDo) Returning(value interface{}, columns ...string) IUserPointsTransactionDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userPointsTransactionDo) Not(conds ...gen.Condition) IUserPointsTransactionDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userPointsTransactionDo) Or(conds ...gen.Condition) IUserPointsTransactionDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userPointsTransactionDo) Select(conds ...field.Expr) IUserPointsTransactionDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userPointsTransactionDo) Where(conds ...gen.Condition) IUserPointsTransactionDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userPointsTransactionDo) Order(conds ...field.Expr) IUserPointsTransactionDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userPointsTransactionDo) Distinct(cols ...field.Expr) IUserPointsTransactionDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userPointsTransactionDo) Omit(cols ...field.Expr) IUserPointsTransactionDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userPointsTransactionDo) Join(table schema.Tabler, on ...field.Expr) IUserPointsTransactionDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userPointsTransactionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserPointsTransactionDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userPointsTransactionDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserPointsTransactionDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userPointsTransactionDo) Group(cols ...field.Expr) IUserPointsTransactionDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userPointsTransactionDo) Having(conds ...gen.Condition) IUserPointsTransactionDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userPointsTransactionDo) Limit(limit int) IUserPointsTransactionDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userPointsTransactionDo) Offset(offset int) IUserPointsTransactionDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userPointsTransactionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserPointsTransactionDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userPointsTransactionDo) Unscoped() IUserPointsTransactionDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userPointsTransactionDo) Create(values ...*model.UserPointsTransaction) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userPointsTransactionDo) CreateInBatches(values []*model.UserPointsTransaction, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userPointsTransactionDo) Save(values ...*model.UserPointsTransaction) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userPointsTransactionDo) First() (*model.UserPointsTransaction, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPointsTransaction), nil
	}
}

func (u userPointsTransactionDo) Take() (*model.UserPointsTransaction, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPointsTransaction), nil
	}
}

func (u userPointsTransactionDo) Last() (*model.UserPointsTransaction, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPointsTransaction), nil
	}
}

func (u userPointsTransactionDo) Find() ([]*model.UserPointsTransaction, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserPointsTransaction), err
}

func (u userPointsTransactionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserPointsTransaction, err error) {
	buf := make([]*model.UserPointsTransaction, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userPointsTransactionDo) FindInBatches(result *[]*model.UserPointsTransaction, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userPointsTransactionDo) Attrs(attrs ...field.AssignExpr) IUserPointsTransactionDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userPointsTransactionDo) Assign(attrs ...field.AssignExpr) IUserPointsTransactionDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userPointsTransactionDo) Joins(fields ...field.RelationField) IUserPointsTransactionDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userPointsTransactionDo) Preload(fields ...field.RelationField) IUserPointsTransactionDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userPointsTransactionDo) FirstOrInit() (*model.UserPointsTransaction, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPointsTransaction), nil
	}
}

func (u userPointsTransactionDo) FirstOrCreate() (*model.UserPointsTransaction, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPointsTransaction), nil
	}
}

func (u userPointsTransactionDo) FindByPage(offset int, limit int) (result []*model.UserPointsTransaction, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userPointsTransactionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userPointsTransactionDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userPointsTransactionDo) Delete(models ...*model.UserPointsTransaction) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userPointsTransactionDo) withDO(do gen.Dao) *userPointsTransactionDo {
	u.DO = *do.(*gen.DO)
	return u
}
