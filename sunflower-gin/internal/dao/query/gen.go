// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                     = new(Query)
	UserCheckinRecord     *userCheckinRecord
	UserMonthlyBonusLog   *userMonthlyBonusLog
	UserPoint             *userPoint
	UserPointsTransaction *userPointsTransaction
	Userinfo              *userinfo
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	UserCheckinRecord = &Q.UserCheckinRecord
	UserMonthlyBonusLog = &Q.UserMonthlyBonusLog
	UserPoint = &Q.UserPoint
	UserPointsTransaction = &Q.UserPointsTransaction
	Userinfo = &Q.Userinfo
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                    db,
		UserCheckinRecord:     newUserCheckinRecord(db, opts...),
		UserMonthlyBonusLog:   newUserMonthlyBonusLog(db, opts...),
		UserPoint:             newUserPoint(db, opts...),
		UserPointsTransaction: newUserPointsTransaction(db, opts...),
		Userinfo:              newUserinfo(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	UserCheckinRecord     userCheckinRecord
	UserMonthlyBonusLog   userMonthlyBonusLog
	UserPoint             userPoint
	UserPointsTransaction userPointsTransaction
	Userinfo              userinfo
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                    db,
		UserCheckinRecord:     q.UserCheckinRecord.clone(db),
		UserMonthlyBonusLog:   q.UserMonthlyBonusLog.clone(db),
		UserPoint:             q.UserPoint.clone(db),
		UserPointsTransaction: q.UserPointsTransaction.clone(db),
		Userinfo:              q.Userinfo.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                    db,
		UserCheckinRecord:     q.UserCheckinRecord.replaceDB(db),
		UserMonthlyBonusLog:   q.UserMonthlyBonusLog.replaceDB(db),
		UserPoint:             q.UserPoint.replaceDB(db),
		UserPointsTransaction: q.UserPointsTransaction.replaceDB(db),
		Userinfo:              q.Userinfo.replaceDB(db),
	}
}

type queryCtx struct {
	UserCheckinRecord     IUserCheckinRecordDo
	UserMonthlyBonusLog   IUserMonthlyBonusLogDo
	UserPoint             IUserPointDo
	UserPointsTransaction IUserPointsTransactionDo
	Userinfo              IUserinfoDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		UserCheckinRecord:     q.UserCheckinRecord.WithContext(ctx),
		UserMonthlyBonusLog:   q.UserMonthlyBonusLog.WithContext(ctx),
		UserPoint:             q.UserPoint.WithContext(ctx),
		UserPointsTransaction: q.UserPointsTransaction.WithContext(ctx),
		Userinfo:              q.Userinfo.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
