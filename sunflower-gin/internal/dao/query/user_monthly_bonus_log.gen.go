// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"sunflower-gin/internal/model"
)

func newUserMonthlyBonusLog(db *gorm.DB, opts ...gen.DOOption) userMonthlyBonusLog {
	_userMonthlyBonusLog := userMonthlyBonusLog{}

	_userMonthlyBonusLog.userMonthlyBonusLogDo.UseDB(db, opts...)
	_userMonthlyBonusLog.userMonthlyBonusLogDo.UseModel(&model.UserMonthlyBonusLog{})

	tableName := _userMonthlyBonusLog.userMonthlyBonusLogDo.TableName()
	_userMonthlyBonusLog.ALL = field.NewAsterisk(tableName)
	_userMonthlyBonusLog.ID = field.NewInt64(tableName, "id")
	_userMonthlyBonusLog.UserID = field.NewInt64(tableName, "user_id")
	_userMonthlyBonusLog.YearMonth = field.NewString(tableName, "year_month")
	_userMonthlyBonusLog.BonusType = field.NewInt32(tableName, "bonus_type")
	_userMonthlyBonusLog.Description = field.NewString(tableName, "description")
	_userMonthlyBonusLog.CreatedAt = field.NewTime(tableName, "created_at")
	_userMonthlyBonusLog.UpdatedAt = field.NewTime(tableName, "updated_at")
	_userMonthlyBonusLog.DeletedAt = field.NewField(tableName, "deleted_at")

	_userMonthlyBonusLog.fillFieldMap()

	return _userMonthlyBonusLog
}

type userMonthlyBonusLog struct {
	userMonthlyBonusLogDo userMonthlyBonusLogDo

	ALL         field.Asterisk
	ID          field.Int64  // ID
	UserID      field.Int64  // ID
	YearMonth   field.String // YYYYMM
	BonusType   field.Int32  // 1:3 2:7 3:15 4:
	Description field.String
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field

	fieldMap map[string]field.Expr
}

func (u userMonthlyBonusLog) Table(newTableName string) *userMonthlyBonusLog {
	u.userMonthlyBonusLogDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userMonthlyBonusLog) As(alias string) *userMonthlyBonusLog {
	u.userMonthlyBonusLogDo.DO = *(u.userMonthlyBonusLogDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userMonthlyBonusLog) updateTableName(table string) *userMonthlyBonusLog {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.YearMonth = field.NewString(table, "year_month")
	u.BonusType = field.NewInt32(table, "bonus_type")
	u.Description = field.NewString(table, "description")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")

	u.fillFieldMap()

	return u
}

func (u *userMonthlyBonusLog) WithContext(ctx context.Context) IUserMonthlyBonusLogDo {
	return u.userMonthlyBonusLogDo.WithContext(ctx)
}

func (u userMonthlyBonusLog) TableName() string { return u.userMonthlyBonusLogDo.TableName() }

func (u userMonthlyBonusLog) Alias() string { return u.userMonthlyBonusLogDo.Alias() }

func (u userMonthlyBonusLog) Columns(cols ...field.Expr) gen.Columns {
	return u.userMonthlyBonusLogDo.Columns(cols...)
}

func (u *userMonthlyBonusLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userMonthlyBonusLog) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 8)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["year_month"] = u.YearMonth
	u.fieldMap["bonus_type"] = u.BonusType
	u.fieldMap["description"] = u.Description
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
}

func (u userMonthlyBonusLog) clone(db *gorm.DB) userMonthlyBonusLog {
	u.userMonthlyBonusLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userMonthlyBonusLog) replaceDB(db *gorm.DB) userMonthlyBonusLog {
	u.userMonthlyBonusLogDo.ReplaceDB(db)
	return u
}

type userMonthlyBonusLogDo struct{ gen.DO }

type IUserMonthlyBonusLogDo interface {
	gen.SubQuery
	Debug() IUserMonthlyBonusLogDo
	WithContext(ctx context.Context) IUserMonthlyBonusLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserMonthlyBonusLogDo
	WriteDB() IUserMonthlyBonusLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserMonthlyBonusLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserMonthlyBonusLogDo
	Not(conds ...gen.Condition) IUserMonthlyBonusLogDo
	Or(conds ...gen.Condition) IUserMonthlyBonusLogDo
	Select(conds ...field.Expr) IUserMonthlyBonusLogDo
	Where(conds ...gen.Condition) IUserMonthlyBonusLogDo
	Order(conds ...field.Expr) IUserMonthlyBonusLogDo
	Distinct(cols ...field.Expr) IUserMonthlyBonusLogDo
	Omit(cols ...field.Expr) IUserMonthlyBonusLogDo
	Join(table schema.Tabler, on ...field.Expr) IUserMonthlyBonusLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserMonthlyBonusLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserMonthlyBonusLogDo
	Group(cols ...field.Expr) IUserMonthlyBonusLogDo
	Having(conds ...gen.Condition) IUserMonthlyBonusLogDo
	Limit(limit int) IUserMonthlyBonusLogDo
	Offset(offset int) IUserMonthlyBonusLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserMonthlyBonusLogDo
	Unscoped() IUserMonthlyBonusLogDo
	Create(values ...*model.UserMonthlyBonusLog) error
	CreateInBatches(values []*model.UserMonthlyBonusLog, batchSize int) error
	Save(values ...*model.UserMonthlyBonusLog) error
	First() (*model.UserMonthlyBonusLog, error)
	Take() (*model.UserMonthlyBonusLog, error)
	Last() (*model.UserMonthlyBonusLog, error)
	Find() ([]*model.UserMonthlyBonusLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserMonthlyBonusLog, err error)
	FindInBatches(result *[]*model.UserMonthlyBonusLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserMonthlyBonusLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserMonthlyBonusLogDo
	Assign(attrs ...field.AssignExpr) IUserMonthlyBonusLogDo
	Joins(fields ...field.RelationField) IUserMonthlyBonusLogDo
	Preload(fields ...field.RelationField) IUserMonthlyBonusLogDo
	FirstOrInit() (*model.UserMonthlyBonusLog, error)
	FirstOrCreate() (*model.UserMonthlyBonusLog, error)
	FindByPage(offset int, limit int) (result []*model.UserMonthlyBonusLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserMonthlyBonusLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userMonthlyBonusLogDo) Debug() IUserMonthlyBonusLogDo {
	return u.withDO(u.DO.Debug())
}

func (u userMonthlyBonusLogDo) WithContext(ctx context.Context) IUserMonthlyBonusLogDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userMonthlyBonusLogDo) ReadDB() IUserMonthlyBonusLogDo {
	return u.Clauses(dbresolver.Read)
}

func (u userMonthlyBonusLogDo) WriteDB() IUserMonthlyBonusLogDo {
	return u.Clauses(dbresolver.Write)
}

func (u userMonthlyBonusLogDo) Session(config *gorm.Session) IUserMonthlyBonusLogDo {
	return u.withDO(u.DO.Session(config))
}

func (u userMonthlyBonusLogDo) Clauses(conds ...clause.Expression) IUserMonthlyBonusLogDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userMonthlyBonusLogDo) Returning(value interface{}, columns ...string) IUserMonthlyBonusLogDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userMonthlyBonusLogDo) Not(conds ...gen.Condition) IUserMonthlyBonusLogDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userMonthlyBonusLogDo) Or(conds ...gen.Condition) IUserMonthlyBonusLogDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userMonthlyBonusLogDo) Select(conds ...field.Expr) IUserMonthlyBonusLogDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userMonthlyBonusLogDo) Where(conds ...gen.Condition) IUserMonthlyBonusLogDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userMonthlyBonusLogDo) Order(conds ...field.Expr) IUserMonthlyBonusLogDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userMonthlyBonusLogDo) Distinct(cols ...field.Expr) IUserMonthlyBonusLogDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userMonthlyBonusLogDo) Omit(cols ...field.Expr) IUserMonthlyBonusLogDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userMonthlyBonusLogDo) Join(table schema.Tabler, on ...field.Expr) IUserMonthlyBonusLogDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userMonthlyBonusLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserMonthlyBonusLogDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userMonthlyBonusLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserMonthlyBonusLogDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userMonthlyBonusLogDo) Group(cols ...field.Expr) IUserMonthlyBonusLogDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userMonthlyBonusLogDo) Having(conds ...gen.Condition) IUserMonthlyBonusLogDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userMonthlyBonusLogDo) Limit(limit int) IUserMonthlyBonusLogDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userMonthlyBonusLogDo) Offset(offset int) IUserMonthlyBonusLogDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userMonthlyBonusLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserMonthlyBonusLogDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userMonthlyBonusLogDo) Unscoped() IUserMonthlyBonusLogDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userMonthlyBonusLogDo) Create(values ...*model.UserMonthlyBonusLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userMonthlyBonusLogDo) CreateInBatches(values []*model.UserMonthlyBonusLog, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userMonthlyBonusLogDo) Save(values ...*model.UserMonthlyBonusLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userMonthlyBonusLogDo) First() (*model.UserMonthlyBonusLog, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserMonthlyBonusLog), nil
	}
}

func (u userMonthlyBonusLogDo) Take() (*model.UserMonthlyBonusLog, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserMonthlyBonusLog), nil
	}
}

func (u userMonthlyBonusLogDo) Last() (*model.UserMonthlyBonusLog, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserMonthlyBonusLog), nil
	}
}

func (u userMonthlyBonusLogDo) Find() ([]*model.UserMonthlyBonusLog, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserMonthlyBonusLog), err
}

func (u userMonthlyBonusLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserMonthlyBonusLog, err error) {
	buf := make([]*model.UserMonthlyBonusLog, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userMonthlyBonusLogDo) FindInBatches(result *[]*model.UserMonthlyBonusLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userMonthlyBonusLogDo) Attrs(attrs ...field.AssignExpr) IUserMonthlyBonusLogDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userMonthlyBonusLogDo) Assign(attrs ...field.AssignExpr) IUserMonthlyBonusLogDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userMonthlyBonusLogDo) Joins(fields ...field.RelationField) IUserMonthlyBonusLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userMonthlyBonusLogDo) Preload(fields ...field.RelationField) IUserMonthlyBonusLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userMonthlyBonusLogDo) FirstOrInit() (*model.UserMonthlyBonusLog, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserMonthlyBonusLog), nil
	}
}

func (u userMonthlyBonusLogDo) FirstOrCreate() (*model.UserMonthlyBonusLog, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserMonthlyBonusLog), nil
	}
}

func (u userMonthlyBonusLogDo) FindByPage(offset int, limit int) (result []*model.UserMonthlyBonusLog, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userMonthlyBonusLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userMonthlyBonusLogDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userMonthlyBonusLogDo) Delete(models ...*model.UserMonthlyBonusLog) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userMonthlyBonusLogDo) withDO(do gen.Dao) *userMonthlyBonusLogDo {
	u.DO = *do.(*gen.DO)
	return u
}
