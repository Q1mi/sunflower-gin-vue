// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"sunflower-gin/internal/model"
)

func newUserCheckinRecord(db *gorm.DB, opts ...gen.DOOption) userCheckinRecord {
	_userCheckinRecord := userCheckinRecord{}

	_userCheckinRecord.userCheckinRecordDo.UseDB(db, opts...)
	_userCheckinRecord.userCheckinRecordDo.UseModel(&model.UserCheckinRecord{})

	tableName := _userCheckinRecord.userCheckinRecordDo.TableName()
	_userCheckinRecord.ALL = field.NewAsterisk(tableName)
	_userCheckinRecord.ID = field.NewInt64(tableName, "id")
	_userCheckinRecord.UserID = field.NewInt64(tableName, "user_id")
	_userCheckinRecord.CheckinDate = field.NewTime(tableName, "checkin_date")
	_userCheckinRecord.CheckinType = field.NewInt32(tableName, "checkin_type")
	_userCheckinRecord.PointsAwardedBase = field.NewInt32(tableName, "points_awarded_base")
	_userCheckinRecord.CreatedAt = field.NewTime(tableName, "created_at")
	_userCheckinRecord.UpdatedAt = field.NewTime(tableName, "updated_at")
	_userCheckinRecord.DeletedAt = field.NewField(tableName, "deleted_at")

	_userCheckinRecord.fillFieldMap()

	return _userCheckinRecord
}

type userCheckinRecord struct {
	userCheckinRecordDo userCheckinRecordDo

	ALL               field.Asterisk
	ID                field.Int64 // ID
	UserID            field.Int64 // ID
	CheckinDate       field.Time
	CheckinType       field.Int32 // 1=2=
	PointsAwardedBase field.Int32
	CreatedAt         field.Time
	UpdatedAt         field.Time
	DeletedAt         field.Field

	fieldMap map[string]field.Expr
}

func (u userCheckinRecord) Table(newTableName string) *userCheckinRecord {
	u.userCheckinRecordDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userCheckinRecord) As(alias string) *userCheckinRecord {
	u.userCheckinRecordDo.DO = *(u.userCheckinRecordDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userCheckinRecord) updateTableName(table string) *userCheckinRecord {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.CheckinDate = field.NewTime(table, "checkin_date")
	u.CheckinType = field.NewInt32(table, "checkin_type")
	u.PointsAwardedBase = field.NewInt32(table, "points_awarded_base")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")

	u.fillFieldMap()

	return u
}

func (u *userCheckinRecord) WithContext(ctx context.Context) IUserCheckinRecordDo {
	return u.userCheckinRecordDo.WithContext(ctx)
}

func (u userCheckinRecord) TableName() string { return u.userCheckinRecordDo.TableName() }

func (u userCheckinRecord) Alias() string { return u.userCheckinRecordDo.Alias() }

func (u userCheckinRecord) Columns(cols ...field.Expr) gen.Columns {
	return u.userCheckinRecordDo.Columns(cols...)
}

func (u *userCheckinRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userCheckinRecord) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 8)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["checkin_date"] = u.CheckinDate
	u.fieldMap["checkin_type"] = u.CheckinType
	u.fieldMap["points_awarded_base"] = u.PointsAwardedBase
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
}

func (u userCheckinRecord) clone(db *gorm.DB) userCheckinRecord {
	u.userCheckinRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userCheckinRecord) replaceDB(db *gorm.DB) userCheckinRecord {
	u.userCheckinRecordDo.ReplaceDB(db)
	return u
}

type userCheckinRecordDo struct{ gen.DO }

type IUserCheckinRecordDo interface {
	gen.SubQuery
	Debug() IUserCheckinRecordDo
	WithContext(ctx context.Context) IUserCheckinRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserCheckinRecordDo
	WriteDB() IUserCheckinRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserCheckinRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserCheckinRecordDo
	Not(conds ...gen.Condition) IUserCheckinRecordDo
	Or(conds ...gen.Condition) IUserCheckinRecordDo
	Select(conds ...field.Expr) IUserCheckinRecordDo
	Where(conds ...gen.Condition) IUserCheckinRecordDo
	Order(conds ...field.Expr) IUserCheckinRecordDo
	Distinct(cols ...field.Expr) IUserCheckinRecordDo
	Omit(cols ...field.Expr) IUserCheckinRecordDo
	Join(table schema.Tabler, on ...field.Expr) IUserCheckinRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserCheckinRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserCheckinRecordDo
	Group(cols ...field.Expr) IUserCheckinRecordDo
	Having(conds ...gen.Condition) IUserCheckinRecordDo
	Limit(limit int) IUserCheckinRecordDo
	Offset(offset int) IUserCheckinRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserCheckinRecordDo
	Unscoped() IUserCheckinRecordDo
	Create(values ...*model.UserCheckinRecord) error
	CreateInBatches(values []*model.UserCheckinRecord, batchSize int) error
	Save(values ...*model.UserCheckinRecord) error
	First() (*model.UserCheckinRecord, error)
	Take() (*model.UserCheckinRecord, error)
	Last() (*model.UserCheckinRecord, error)
	Find() ([]*model.UserCheckinRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserCheckinRecord, err error)
	FindInBatches(result *[]*model.UserCheckinRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserCheckinRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserCheckinRecordDo
	Assign(attrs ...field.AssignExpr) IUserCheckinRecordDo
	Joins(fields ...field.RelationField) IUserCheckinRecordDo
	Preload(fields ...field.RelationField) IUserCheckinRecordDo
	FirstOrInit() (*model.UserCheckinRecord, error)
	FirstOrCreate() (*model.UserCheckinRecord, error)
	FindByPage(offset int, limit int) (result []*model.UserCheckinRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserCheckinRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userCheckinRecordDo) Debug() IUserCheckinRecordDo {
	return u.withDO(u.DO.Debug())
}

func (u userCheckinRecordDo) WithContext(ctx context.Context) IUserCheckinRecordDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userCheckinRecordDo) ReadDB() IUserCheckinRecordDo {
	return u.Clauses(dbresolver.Read)
}

func (u userCheckinRecordDo) WriteDB() IUserCheckinRecordDo {
	return u.Clauses(dbresolver.Write)
}

func (u userCheckinRecordDo) Session(config *gorm.Session) IUserCheckinRecordDo {
	return u.withDO(u.DO.Session(config))
}

func (u userCheckinRecordDo) Clauses(conds ...clause.Expression) IUserCheckinRecordDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userCheckinRecordDo) Returning(value interface{}, columns ...string) IUserCheckinRecordDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userCheckinRecordDo) Not(conds ...gen.Condition) IUserCheckinRecordDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userCheckinRecordDo) Or(conds ...gen.Condition) IUserCheckinRecordDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userCheckinRecordDo) Select(conds ...field.Expr) IUserCheckinRecordDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userCheckinRecordDo) Where(conds ...gen.Condition) IUserCheckinRecordDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userCheckinRecordDo) Order(conds ...field.Expr) IUserCheckinRecordDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userCheckinRecordDo) Distinct(cols ...field.Expr) IUserCheckinRecordDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userCheckinRecordDo) Omit(cols ...field.Expr) IUserCheckinRecordDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userCheckinRecordDo) Join(table schema.Tabler, on ...field.Expr) IUserCheckinRecordDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userCheckinRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserCheckinRecordDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userCheckinRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserCheckinRecordDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userCheckinRecordDo) Group(cols ...field.Expr) IUserCheckinRecordDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userCheckinRecordDo) Having(conds ...gen.Condition) IUserCheckinRecordDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userCheckinRecordDo) Limit(limit int) IUserCheckinRecordDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userCheckinRecordDo) Offset(offset int) IUserCheckinRecordDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userCheckinRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserCheckinRecordDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userCheckinRecordDo) Unscoped() IUserCheckinRecordDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userCheckinRecordDo) Create(values ...*model.UserCheckinRecord) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userCheckinRecordDo) CreateInBatches(values []*model.UserCheckinRecord, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userCheckinRecordDo) Save(values ...*model.UserCheckinRecord) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userCheckinRecordDo) First() (*model.UserCheckinRecord, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCheckinRecord), nil
	}
}

func (u userCheckinRecordDo) Take() (*model.UserCheckinRecord, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCheckinRecord), nil
	}
}

func (u userCheckinRecordDo) Last() (*model.UserCheckinRecord, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCheckinRecord), nil
	}
}

func (u userCheckinRecordDo) Find() ([]*model.UserCheckinRecord, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserCheckinRecord), err
}

func (u userCheckinRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserCheckinRecord, err error) {
	buf := make([]*model.UserCheckinRecord, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userCheckinRecordDo) FindInBatches(result *[]*model.UserCheckinRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userCheckinRecordDo) Attrs(attrs ...field.AssignExpr) IUserCheckinRecordDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userCheckinRecordDo) Assign(attrs ...field.AssignExpr) IUserCheckinRecordDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userCheckinRecordDo) Joins(fields ...field.RelationField) IUserCheckinRecordDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userCheckinRecordDo) Preload(fields ...field.RelationField) IUserCheckinRecordDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userCheckinRecordDo) FirstOrInit() (*model.UserCheckinRecord, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCheckinRecord), nil
	}
}

func (u userCheckinRecordDo) FirstOrCreate() (*model.UserCheckinRecord, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCheckinRecord), nil
	}
}

func (u userCheckinRecordDo) FindByPage(offset int, limit int) (result []*model.UserCheckinRecord, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userCheckinRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userCheckinRecordDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userCheckinRecordDo) Delete(models ...*model.UserCheckinRecord) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userCheckinRecordDo) withDO(do gen.Dao) *userCheckinRecordDo {
	u.DO = *do.(*gen.DO)
	return u
}
